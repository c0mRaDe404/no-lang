program         ::= stmts /* general statements */

block           ::= "{" (stmts)? "}" /* loops,conditions etc.. */

stmts           ::= stmt stmts | stmt

stmt            ::= exp ";"
                  | declaration ";"
                  | assignment ";"
                  | "print" "(" exp ")" ";"
                  | if-stmt ";"
                  | loop-stmt ";"
                  | break-stmt ";"
                  | cont-stmt ";"

if-stmt         ::= "if" conditional (block)? (else-stmt)?

else_stmt       ::= "else" (block)? 

loop-stmt       ::= while-stmt
                  | for-stmt

for-stmt        ::= "for" "(" (declaration|assignment) ";" conditional ";" exp ")" (block)?

while-stmt      ::= "while" conditional (block)?

/*let x,y,z be int;*/

let a,b,c = 10;

declaration     ::= "let" ID ("," ID ("=" exp)?)* "="  exp  

expression      ::= assignment

assignment      ::= logical_expr (("=") assignment)?

/* assignment      ::= logical_expr ((("=") logical_expr)*)? */

logical_expr    ::= logic_term ("or" logic_term)*

logic_term      ::= logic_factor ("and" logic_factor)*

logic_factor    ::= cond_expr
                  | not cond_expr

cond_expr       ::= Arithmetic_exp (c_op Arithmetic_exp)*

c_op            ::= ("==" | ">" | "<" | "<=" | ">=" | "!=")

Arithmetic_expr ::= term (("+" | "-") term)

Arithmetic_term ::= factor ( ("*" | "/" | "%") factor)*

unary           ::= ( "-" | "+" ) factor

Arithmetic_
factor          ::= NUM
                  |  "(" expression ")"
                  |  unary
                  |  STRING
                  |  id
