program     -> stmts

block       ->   "{" (stmts)? "}"

stmts       -> stmt stmts | stmt

stmt            -> exp (";")?
                |  declaration (";")?
                | "print" "(" exp ")" (";")?
                |  if-stmt (";")?
                | loop-stmt(";")?
                | break-stmt ";"
                | cont-stmt ";"



if-stmt         -> "if" conditional (block)? (else-stmt)?
else_stmt       -> "else" (block)? 

loop-stmt       -> while-stmt
                | for-stmt

for-stmt        -> "for" "(" (declaration|assignment) ";" conditional ";" exp ")" (block)?
while-stmt      -> "while" conditional (block)?

conditional     -> exp (("==" | "<" | ">" ) exp)? 

declaraion      -> "let" ID "="  exp        
 
//assign          -> ID "=" assign | exp 

            

exp         -> term exp_prime  | logic_op  

exp_prime   -> "+" term exp_prime 
            |  "-" term exp_prime
            | "and" term exp_prime
            | "or"  term exp_prime
            |  epsilon

term        -> factor term_prime

term_prime  -> "*" factor term_prime
            |  "/" factor term_prime
            |   "%" factor term_prime
            |  epsilon

unary       -> ( "-" | "+" ) factor

factor      -> NUM              //token
            |  "(" exp ")"
            |  unary
            |  STRING
            | "not" exp


exp_prime - nullable
term_prime - nullable
