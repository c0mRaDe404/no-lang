program     -> stmts

block       ->   "{" (stmts)? "}"

stmts       -> stmt stmts | stmt

stmt            -> exp (";")?
                |  declaration (";")?
                | "print" "(" exp ")" (";")?
                |  if-stmt (";")?
                | loop-stmt(";")?
                | break-stmt ";"
                | cont-stmt ";"



if-stmt         -> "if" conditional (block)? (else-stmt)?
else_stmt       -> "else" (block)? 

loop-stmt       -> while-stmt
                | for-stmt

for-stmt        -> "for" "(" (declaration|assignment) ";" conditional ";" exp ")" (block)?
while-stmt      -> "while" conditional (block)?


declaraion      -> "let" ID "="  exp        
 


expression              -> logical_expr




logical_expr            -> logic_term logic_exp_prime
logic_exp_prime         -> "or" logic_term logic_exp_prime
                        | epsilon

logic_term                -> logic_factor logic_term_prime
logic_term_prime          -> "and" logic_factor logic_term_prime
                        | epsilon

logic_factor            -> conditional_expr
                        | not conditional_expr




conditional_expr        -> Arithmetic_exp cond_prime
conditional_expr_prime  -> c_op Arithmetic_exp cond_expr_prime
                        | epsilon


c_op                    -> ("==" | ">" | "<" | "<=" | ">=" | "!=")



Arithmetic_expr         -> term exp_prime  

expr_prime              -> "+" term expr_prime 
                        |  "-" term expr_prime
                        |  epsilon

term                    -> factor term_prime

term_prime              -> "*" factor term_prime
                        |  "/" factor term_prime
                        |   "%" factor term_prime
                        |  epsilon

unary                   -> ( "-" | "+" ) factor

factor                  -> NUM              //token
                        |  "(" expression ")"
                        |  unary
                        |  STRING


